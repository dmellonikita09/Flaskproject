# Query: url_for
# ContextLines: 1

117 results - 38 files

flask_web\app\posts\routes.py:
   1: from flask import (render_template, url_for, flash,
   2                     redirect, request, abort, Blueprint)

  22          flash('Your post has been created!', 'success')
  23:         return redirect(url_for('main.home'))
  24:    # upload_file = url_for('static', filename='upload/')
  25      return render_template('create_post.html', title='New Post', form=form, legend='New Post')# upload_file = upload_file)

  42          flash('Your post has been updated', 'success')
  43:         return redirect(url_for('posts.post', post_id=post.id))
  44      elif request.method == 'GET':

  57      flash('Your post has been deleted!', 'success')
  58:     return redirect(url_for('main.home'))

flask_web\app\templates\home.html:
   4          <article class="media content-section">
   5:             <img class="rounded-circle article-img" src="{{ url_for('static', filename='picture/' + post.author.image_file) }}">
   6              <div class="media-body">
   7              <div class="article-metadata">
   8:                 <h2><a class="article-title" href="{{ url_for('posts.post', post_id=post.id) }}">{{ post.title }}</a></h2>
   9:                 <a class="mr-2" href="{{ url_for('users.user_posts', username=post.author.username) }}">{{ post.author.username }}</a>
  10                  <small class="text-muted">{{ post.date_posted.strftime('%Y-%m-%d') }}</small>

  19              {% if post.page == page_num %}
  20:                 <a class="btn btn-info mb-4" href="{{ url_for('main.home', page=page_num) }}">{{ page_num }}</a>
  21              {% else %}
  22:                 <a class="btn btn-outline-info mb-4" href="{{ url_for('main.home', page=page_num) }}">{{ page_num }}</a>
  23              {% endif %}

flask_web\app\templates\layout.html:
  10  
  11:     <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='main.css') }}">
  12  

  28              <div class="navbar-nav mr-auto">
  29:               <a class="nav-item nav-link" href="{{ url_for('main.home') }}">Home</a>
  30:               <a class="nav-item nav-link" href="{{ url_for('main.about') }}">About</a>
  31              </div>

  34                {% if current_user.is_authenticated %}
  35:                 <a class="nav-item nav-link" href="{{ url_for('posts.new_post') }}">New Post</a>
  36:                 <a class="nav-item nav-link" href="{{ url_for('users.account') }}">Account</a>
  37:                 <a class="nav-item nav-link" href="{{ url_for('users.logout') }}">Logout</a>
  38                {% else %}
  39:                 <a class="nav-item nav-link" href="{{ url_for('users.login') }}">Login</a>
  40:                 <a class="nav-item nav-link" href="{{ url_for('users.register') }}">Register</a>
  41                {% endif %}

flask_web\app\templates\login.html:
  41                  <small class="text-muted ml-2">
  42:                     <a href="{{ url_for('users.reset_request') }}">Forgot Password?</a>
  43                  </small>

  49          <small class="text-muted">
  50:             Need An Account? <a class="ml-2" href="{{ url_for('users.register') }}">Sign Up Now</a>
  51          </small>

flask_web\app\templates\post.html:
   3      <article class="media content-section">
   4:         <img class="rounded-circle article-img" src="{{ url_for('static', filename='picture/' + post.author.image_file) }}">
   5          <div class="media-body">
   6          <div class="article-metadata">
   7:             <a class="mr-2" href="{{ url_for('posts.user_posts', username=post.author.usrename) }}">{{ post.author.username }}</a>
   8              <small class="text-muted">{{ post.date_posted.strftime('%Y-%m-%d') }}</small>

  10                  <div>
  11:                    <a class="btn btn-secondary btn-sm mt-1 mb-1" href="{{ url_for('posts.update_post', post_id=post.id) }}">Update</a> 
  12                     <button type="button" class="btn btn-danger btn-sm m-1" data-toggle="modal" data-target="#deleteModal">Delete</button>

  31                      <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
  32:                     <form action="{{ url_for('posts.delete_post', post_id=post.id) }}" method="POST">
  33                          <input class="btn-danger" type="submit" value="Delete">

flask_web\app\templates\register.html:
  73          <small class="text-muted">
  74:             Already have an account? <a class="ml-2" href="{{ url_for('users.login') }}">Sign In</a>
  75          </small>

flask_web\app\templates\user_posts.html:
   5          <article class="media content-section">
   6:             <img class="rounded-circle article-img" src="{{ url_for('static', filename='picture/' + post.author.image_file) }}">
   7              <div class="media-body">
   8              <div class="article-metadata">
   9:                 <h2><a class="article-title" href="{{ url_for('posts.post', post_id=post.id) }}">{{ post.title }}</a></h2>
  10:                 <a class="mr-2" href="{{ url_for('posts.user_posts', username=post.author.username) }}">{{ post.author.username }}</a>
  11                  <small class="text-muted">{{ post.date_posted.strftime('%Y-%m-%d') }}</small>

  20              {% if post.page == page_num %}
  21:                 <a class="btn btn-info mb-4" href="{{ url_for('posts.user_posts', username=user.username, page=page_num) }}">{{ page_num }}</a>
  22              {% else %}
  23:                 <a class="btn btn-outline-info mb-4" href="{{ url_for('posts.user_posts', username=user.username, page=page_num) }}">{{ page_num }}</a>
  24              {% endif %}

flask_web\app\users\routes.py:
   1: from flask import render_template, url_for, flash, redirect, request, Blueprint
   2  from flask_login import login_user, current_user, logout_user, login_required

  13      if current_user.is_authenticated:
  14:         return redirect(url_for('main.home'))
  15      form = RegistrationForm()

  21          flash(f'New account has been created! You can now log in', 'success!')
  22:         return redirect(url_for('users.login'))
  23      return render_template('register.html', title='Register', form=form)

  27      if current_user.is_authenticated:
  28:         return redirect(url_for('main.home'))
  29      form = LoginForm()

  34              next_page = request.args.get('next')
  35:             return redirect(next_page) if next_page else redirect(url_for('main.home'))
  36          else:

  41      logout_user()
  42:     return redirect(url_for('main.home'))
  43  

  55          flash('Your account has been updated!', 'success')
  56:         return redirect(url_for('users.account'))
  57      elif request.method == 'GET':

  59          form.email.data = current_user.email 
  60:     image_file = url_for('static', filename='picture/' + current_user.image_file)
  61      return render_template('account.html', title='Account', image_file=image_file, form=form)

  74      if current_user.is_authenticated:
  75:         return redirect(url_for('main.home'))
  76      form = RequestResetForm()

  80          flash('An email has been sent with instructions to reset your password.', 'info')
  81:         return redirect(url_for('users.login'))
  82      return render_template('reset_request.html', title='Reset Password', form=form)

  87      if current_user.is_authenticated:
  88:         return redirect(url_for('main.home'))
  89      user = User.verify_reset_token(token)

  91          flash('That is an invalid or expired token', 'warning')
  92:         return redirect(url_for('users.reset_request'))
  93      form = ResetPasswordForm()

  98          flash('Your password has been updated! You are now able to log in', 'success')
  99:         return redirect(url_for('users.login'))
  100      return render_template('reset_token.html', title='Reset Password', form=form)

flask_web\app\users\utils.py:
   3  #from PIL import Image
   4: from flask import url_for, #current_app
   5  from flask_mail import Message

  28      msg.body = f'''To reset your password, visit the following link:
  29: {url_for('users.reset_token', token=token, _external=True)}
  30  If you did not make this request then simply ignore this email and no changes will be made.

flask_web\Lib\site-packages\flask\__init__.py:
  43  from .helpers import stream_with_context
  44: from .helpers import url_for
  45  from .json import jsonify

flask_web\Lib\site-packages\flask\app.py:
    56  from .helpers import locked_cached_property
    57: from .helpers import url_for
    58  from .json import jsonify

   457  
   458:         #: A list of functions that are called when :meth:`url_for` raises a
   459          #: :exc:`~werkzeug.routing.BuildError`.  Each function registered here

   782          rv.globals.update(
   783:             url_for=url_for,
   784              get_flashed_messages=get_flashed_messages,

  2199      def handle_url_build_error(self, error, endpoint, values):
  2200:         """Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.
  2201          """

flask_web\Lib\site-packages\flask\blueprints.py:
  273          """Like :meth:`Flask.route` but for a blueprint.  The endpoint for the
  274:         :func:`url_for` function is prefixed with the name of the blueprint.
  275          """

  285          """Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for
  286:         the :func:`url_for` function is prefixed with the name of the blueprint.
  287          """

flask_web\Lib\site-packages\flask\helpers.py:
  225  
  226: def url_for(endpoint, **values):
  227      """Generates a URL to the given endpoint with the method provided.

  236  
  237:         url_for('.index')
  238  

  244      To integrate applications, :class:`Flask` has a hook to intercept URL build
  245:     errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`
  246      function results in a :exc:`~werkzeug.routing.BuildError` when the current

  249      it is not ``None``, which can return a string to use as the result of
  250:     `url_for` (instead of `url_for`'s default to raise the
  251      :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.

  254          def external_url_handler(error, endpoint, values):
  255:             "Looks up an external URL when `url_for` cannot build a URL."
  256              # This is an example of hooking the build_error_handler.

  267                      raise error
  268:             # url_for will use this result, instead of raising BuildError.
  269              return url

  273      Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and
  274:     `endpoint` and `values` are the arguments passed into `url_for`.  Note
  275      that this is for building URLs outside the current application, and not for

flask_web\Lib\site-packages\flask_admin\base.py:
    5  
    6: from flask import Blueprint, current_app, render_template, abort, g, url_for
    7  from flask_admin import babel

  168                  Base endpoint name for the view. For example, if there's a view method called "index" and
  169:                 endpoint is set to "myadmin", you can use `url_for('myadmin.index')` to get the URL to the
  170                  view method. Defaults to the class name in lower case.

  387              :param kwargs:
  388:                 Arguments for `url_for`
  389          """
  390:         return url_for(endpoint, **kwargs)
  391  

flask_web\Lib\site-packages\flask_admin\helpers.py:
   2  from jinja2 import contextfunction
   3: from flask import g, request, url_for, flash
   4  from wtforms.validators import DataRequired, InputRequired

  28      """
  29:         Alternative to Flask `url_for`.
  30          If there's current administrative view, will call its `get_url`. If there's none - will
  31:         use generic `url_for`.
  32  

  40      if not view:
  41:         return url_for(endpoint, **kwargs)
  42  

flask_web\Lib\site-packages\flask_admin\menu.py:
    1: from flask import url_for
    2  

  142      def get_url(self):
  143:         return self.url or url_for(self.endpoint)
  144  

flask_web\Lib\site-packages\flask_admin\templates\bootstrap2\admin\layout.html:
   9    {% elif icon_type == 'image' %}
  10:     <img src="{{ url_for('static', filename=icon_value) }}" alt="menu image">
  11    {% elif icon_type == 'image-url' %}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap2\admin\model\modals\create.html:
  10      {{ lib.render_form(form, return_url, extra=None, form_opts=form_opts,
  11:                        action=url_for('.create_view', url=return_url),
  12                         is_modal=True) }}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap2\admin\model\modals\edit.html:
  10      {{ lib.render_form(form, return_url, extra=None, form_opts=form_opts,
  11:                        action=url_for('.edit_view', id=request.args.get('id'), url=return_url),
  12                         is_modal=True) }}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap3\admin\layout.html:
   9    {% elif icon_type == 'image' %}
  10:     <img src="{{ url_for('static', filename=icon_value) }}" alt="menu image">
  11    {% elif icon_type == 'image-url' %}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap3\admin\model\modals\create.html:
  15        {{ lib.render_form(form, return_url, extra=None, form_opts=form_opts,
  16:                          action=url_for('.create_view', url=return_url),
  17                           is_modal=True) }}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap3\admin\model\modals\edit.html:
  17        {{ lib.render_form(form, return_url, extra=None, form_opts=form_opts,
  18:                          action=url_for('.edit_view', id=request.args.get('id'), url=return_url),
  19                           is_modal=True) }}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap4\admin\layout.html:
   9      {% elif icon_type == 'image' %}
  10:       <img src="{{ url_for('static', filename=icon_value) }}" alt="menu image">
  11      {% elif icon_type == 'image-url' %}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap4\admin\model\modals\create.html:
  14    </div>
  15:   {% call lib.form_tag(action=url_for('.create_view', url=return_url)) %}
  16    <div class="modal-body">

  26        {{ lib.render_form(form, return_url, extra=None, form_opts=form_opts,
  27:                          action=url_for('.create_view', url=return_url),
  28                           is_modal=True) }}

flask_web\Lib\site-packages\flask_admin\templates\bootstrap4\admin\model\modals\edit.html:
  17  
  18:   {% call lib.form_tag(action=url_for('.edit_view', id=request.args.get('id'), url=return_url)) %}
  19    <div class="modal-body">

flask_web\Lib\site-packages\flask_admin\tests\test_base.py:
    4  
    5: from flask import Flask, request, abort, url_for
    6  from flask.views import MethodView

  158      with app.test_request_context('/'):
  159:         rv = client.get(url_for('admin.static', filename='bootstrap/bootstrap2/css/bootstrap.css'))
  160      eq_(rv.status_code, 200)

  399      with app.test_request_context('/'):
  400:         rv = client.get(url_for('admin.static', filename='bootstrap/bootstrap2/css/bootstrap.css'))
  401      eq_(rv.status_code, 200)

flask_web\Lib\site-packages\flask_admin\tests\test_form_upload.py:
    7  
    8: from flask import Flask, url_for
    9  from flask_admin import form, helpers

  283  
  284:         eq_(url_for('static', filename=dummy.upload), '/static/inner/test1.txt')

flask_web\Lib\site-packages\flask_admin\translations\zh_Hans_CN\LC_MESSAGES\api.po:
  237  #: flask_admin.contrib.sqla.ModelView.get_url:7
  238: msgid "Arguments for `url_for`"
  239  msgstr ""

flask_web\Lib\site-packages\flask_admin\translations\zh_Hans_CN\LC_MESSAGES\introduction.po:
  782  #: ../../doc/introduction.rst:465
  783: msgid "To generate the URL for a specific view, use *url_for* with a dot prefix::"
  784: msgstr "生成指定视图的 URL，请使用带点前缀的 *url_for*::"
  785  

  792  "When referencing ModelView instances, use the lowercase name of the model"
  793: " as the prefix when calling *url_for*. Other views can be referenced by "
  794  "specifying a unique endpoint for each, and using that as the prefix. So, "

  796  msgstr ""
  797: "当引用 ModelView 实例时，在调用 *url_for* "
  798  "时使用模型的小写名称作为前缀。可以通过为每个视图指定唯一的端点，并将其用作前缀来引用其他视图。所以，可以这样引用::"

flask_web\Lib\site-packages\flask_login\utils.py:
  15  
  16: from flask import (_request_ctx_stack, current_app, request, session, url_for,
  17                     has_request_context)

  96      else:
  97:         return url_for(login_view)
  98  

flask_web\Lib\site-packages\flask_sqlalchemy\__init__.py:
  426                    {% if page != pagination.page %}
  427:                     <a href="{{ url_for(endpoint, page=page) }}">{{ page }}</a>
  428                    {% else %}

flask_web\Lib\site-packages\pip\_internal\models\index.py:
  15          self.netloc = urllib_parse.urlsplit(url).netloc
  16:         self.simple_url = self._url_for_path('simple')
  17:         self.pypi_url = self._url_for_path('pypi')
  18  

  23  
  24:     def _url_for_path(self, path):
  25          # type: (str) -> str

flask_web\venv\lib\python3.9\site-packages\flask\__init__.py:
  43  from .helpers import stream_with_context
  44: from .helpers import url_for
  45  from .json import jsonify

flask_web\venv\lib\python3.9\site-packages\flask\app.py:
    56  from .helpers import locked_cached_property
    57: from .helpers import url_for
    58  from .json import jsonify

   457  
   458:         #: A list of functions that are called when :meth:`url_for` raises a
   459          #: :exc:`~werkzeug.routing.BuildError`.  Each function registered here

   782          rv.globals.update(
   783:             url_for=url_for,
   784              get_flashed_messages=get_flashed_messages,

  2199      def handle_url_build_error(self, error, endpoint, values):
  2200:         """Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.
  2201          """

flask_web\venv\lib\python3.9\site-packages\flask\blueprints.py:
  273          """Like :meth:`Flask.route` but for a blueprint.  The endpoint for the
  274:         :func:`url_for` function is prefixed with the name of the blueprint.
  275          """

  285          """Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for
  286:         the :func:`url_for` function is prefixed with the name of the blueprint.
  287          """

flask_web\venv\lib\python3.9\site-packages\flask\helpers.py:
  225  
  226: def url_for(endpoint, **values):
  227      """Generates a URL to the given endpoint with the method provided.

  236  
  237:         url_for('.index')
  238  

  244      To integrate applications, :class:`Flask` has a hook to intercept URL build
  245:     errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`
  246      function results in a :exc:`~werkzeug.routing.BuildError` when the current

  249      it is not ``None``, which can return a string to use as the result of
  250:     `url_for` (instead of `url_for`'s default to raise the
  251      :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.

  254          def external_url_handler(error, endpoint, values):
  255:             "Looks up an external URL when `url_for` cannot build a URL."
  256              # This is an example of hooking the build_error_handler.

  267                      raise error
  268:             # url_for will use this result, instead of raising BuildError.
  269              return url

  273      Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and
  274:     `endpoint` and `values` are the arguments passed into `url_for`.  Note
  275      that this is for building URLs outside the current application, and not for

flask_web\venv\lib\python3.9\site-packages\flask_sqlalchemy\__init__.py:
  388                    {% if page != pagination.page %}
  389:                     <a href="{{ url_for(endpoint, page=page) }}">{{ page }}</a>
  390                    {% else %}

flask_web\venv\lib\python3.9\site-packages\pip\_internal\models\index.py:
  15          self.netloc = urllib_parse.urlsplit(url).netloc
  16:         self.simple_url = self._url_for_path('simple')
  17:         self.pypi_url = self._url_for_path('pypi')
  18  

  23  
  24:     def _url_for_path(self, path):
  25          # type: (str) -> str
